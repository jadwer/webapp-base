/**
 * INVENTORY MOVEMENTS TABLE
 * Tabla de movimientos de inventario con sorting, selección y acciones
 * Patrón basado en el éxito del módulo Products
 */

'use client'

import React, { memo } from 'react'
import { formatCurrency, formatQuantity } from '@/lib/formatters'
import type { InventoryMovement, MovementSortOptions, WarehouseParsed } from '../types'

interface InventoryMovementsTableProps {
  movements: InventoryMovement[]
  warehouses: WarehouseParsed[]
  isLoading: boolean
  selectedIds: string[]
  onSelectionChange: (ids: string[]) => void
  onEdit: (movement: InventoryMovement) => void
  onView: (movement: InventoryMovement) => void
  onDelete: (movement: InventoryMovement) => void
  sort: MovementSortOptions | null
  onSortChange: (sort: MovementSortOptions | null) => void
}

export const InventoryMovementsTable = memo<InventoryMovementsTableProps>(({
  movements,
  warehouses,
  isLoading,
  selectedIds,
  onSelectionChange,
  onEdit,
  onView,
  onDelete,
  sort,
  onSortChange
}) => {
  console.log('🔄 [InventoryMovementsTable] Rendering with', movements.length, 'movements')
  
  // Create warehouse lookup for performance
  const warehouseMap = React.useMemo(() => {
    return warehouses.reduce((acc, warehouse) => {
      acc[warehouse.id] = warehouse
      return acc
    }, {} as Record<string, WarehouseParsed>)
  }, [warehouses])
  
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      onSelectionChange(movements.map(m => m.id))
    } else {
      onSelectionChange([])
    }
  }
  
  const handleSelectOne = (id: string, checked: boolean) => {
    if (checked) {
      onSelectionChange([...selectedIds, id])
    } else {
      onSelectionChange(selectedIds.filter(selectedId => selectedId !== id))
    }
  }
  
  const handleSort = (field: keyof InventoryMovement) => {
    if (sort?.field === field) {
      // Toggle direction
      const newDirection = sort.direction === 'asc' ? 'desc' : 'asc'
      onSortChange({ field, direction: newDirection })
    } else {
      // New field, start with desc for dates, asc for others
      const direction = field === 'movementDate' ? 'desc' : 'asc'
      onSortChange({ field, direction })
    }
  }
  
  const getSortIcon = (field: keyof InventoryMovement) => {
    if (sort?.field !== field) {
      return <i className="bi bi-arrow-down-up text-muted" />
    }
    return sort.direction === 'asc' 
      ? <i className="bi bi-arrow-up text-primary" />
      : <i className="bi bi-arrow-down text-primary" />
  }
  
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return {
      date: date.toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      }),
      time: date.toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit'
      })
    }
  }
  
  
  const getMovementTypeIcon = (type: string) => {
    const icons: Record<string, string> = {
      'entry': 'bi-arrow-down-circle text-success',
      'exit': 'bi-arrow-up-circle text-danger',
      'transfer': 'bi-arrow-left-right text-info',
      'adjustment': 'bi-wrench text-warning'
    }
    return icons[type] || 'bi-arrow-repeat'
  }
  
  const getMovementTypeBadge = (type: string) => {
    const variants: Record<string, string> = {
      'entry': 'success',
      'exit': 'danger',
      'transfer': 'info',
      'adjustment': 'warning'
    }
    return variants[type] || 'secondary'
  }
  
  const getStatusBadge = (status: string) => {
    const variants: Record<string, string> = {
      'completed': 'success',
      'pending': 'warning',
      'cancelled': 'danger',
      'draft': 'secondary'
    }
    return variants[status] || 'secondary'
  }
  
  const getReferenceTypeLabel = (type: string) => {
    const types: Record<string, string> = {
      'purchase': 'Compra',
      'sale': 'Venta',
      'adjustment': 'Ajuste',
      'transfer': 'Transferencia',
      'return': 'Devolución',
      'damage': 'Daño',
      'count': 'Conteo'
    }
    return types[type] || type
  }
  
  if (isLoading) {
    return (
      <div className="card">
        <div className="card-body text-center py-5">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <p className="mt-3 text-muted">Loading movements...</p>
        </div>
      </div>
    )
  }
  
  if (movements.length === 0) {
    return (
      <div className="card">
        <div className="card-body text-center py-5">
          <i className="bi bi-arrow-repeat display-1 text-muted" />
          <h5 className="mt-3">No movements found</h5>
          <p className="text-muted">Record your first inventory movement to get started</p>
        </div>
      </div>
    )
  }
  
  return (
    <div className="card">
      <div className="table-responsive">
        <table className="table table-hover mb-0">
          <thead className="table-light">
            <tr>
              <th style={{ width: '50px' }}>
                <input
                  type="checkbox"
                  className="form-check-input"
                  checked={selectedIds.length === movements.length && movements.length > 0}
                  onChange={(e) => handleSelectAll(e.target.checked)}
                />
              </th>
              <th>Type</th>
              <th>Product</th>
              <th>Reference</th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('quantity')}
              >
                Quantity {getSortIcon('quantity')}
              </th>
              <th>Warehouse</th>
              <th>Location</th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('unitCost')}
              >
                Cost {getSortIcon('unitCost')}
              </th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('totalValue')}
              >
                Total Value {getSortIcon('totalValue')}
              </th>
              <th>Stock Impact</th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('status')}
              >
                Status {getSortIcon('status')}
              </th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('movementDate')}
              >
                Date {getSortIcon('movementDate')}
              </th>
              <th style={{ width: '120px' }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {movements.map((movement) => {
              const warehouse = warehouseMap[movement.warehouseId]
              const destinationWarehouse = movement.destinationWarehouseId 
                ? warehouseMap[movement.destinationWarehouseId]
                : null
              const formattedDate = formatDate(movement.movementDate)
              
              return (
                <tr key={movement.id}>
                  <td>
                    <input
                      type="checkbox"
                      className="form-check-input"
                      checked={selectedIds.includes(movement.id)}
                      onChange={(e) => handleSelectOne(movement.id, e.target.checked)}
                    />
                  </td>
                  <td>
                    <div className="d-flex align-items-center">
                      <i className={`${getMovementTypeIcon(movement.movementType)} me-2`} />
                      <span className={`badge bg-${getMovementTypeBadge(movement.movementType)}`}>
                        {movement.movementType.toUpperCase()}
                      </span>
                    </div>
                  </td>
                  <td>
                    {movement.product ? (
                      <div>
                        <div className="fw-semibold">{movement.product.name}</div>
                        <div className="small text-muted">{movement.product.sku}</div>
                      </div>
                    ) : (
                      <div className="small text-muted">Product ID: {movement.productId}</div>
                    )}
                  </td>
                  <td>
                    <div>
                      <div className="small fw-semibold">
                        {getReferenceTypeLabel(movement.referenceType)}
                      </div>
                      {movement.referenceId && (
                        <div className="small text-muted">#{movement.referenceId}</div>
                      )}
                      {movement.description && (
                        <div className="small text-muted" title={movement.description}>
                          {movement.description.length > 30 
                            ? `${movement.description.substring(0, 30)}...`
                            : movement.description
                          }
                        </div>
                      )}
                    </div>
                  </td>
                  <td>
                    <div className="d-flex align-items-center">
                      {movement.movementType === 'entry' && (
                        <i className="bi bi-plus-circle text-success me-1" />
                      )}
                      {movement.movementType === 'exit' && (
                        <i className="bi bi-dash-circle text-danger me-1" />
                      )}
                      <span className="fw-semibold">
                        {formatQuantity(movement.quantity)}
                      </span>
                    </div>
                  </td>
                  <td>
                    <div>
                      {warehouse && (
                        <div>
                          <div className="small fw-semibold">{warehouse.name}</div>
                          <div className="small text-muted">{warehouse.code}</div>
                        </div>
                      )}
                      {destinationWarehouse && (
                        <div className="mt-1 pt-1 border-top">
                          <div className="small text-muted">→ {destinationWarehouse.name}</div>
                        </div>
                      )}
                    </div>
                  </td>
                  <td>
                    <div>
                      {movement.location && (
                        <div>
                          <div className="small">{movement.location.name}</div>
                          <code className="small text-muted">{movement.location.code}</code>
                        </div>
                      )}
                      {movement.destinationLocation && (
                        <div className="mt-1 pt-1 border-top">
                          <div className="small text-muted">→ {movement.destinationLocation.name}</div>
                        </div>
                      )}
                    </div>
                  </td>
                  <td>
                    <span className="small">{formatCurrency(movement.unitCost)}</span>
                  </td>
                  <td>
                    <span className="fw-semibold">{formatCurrency(movement.totalValue)}</span>
                  </td>
                  <td>
                    {(movement.previousStock !== undefined && movement.newStock !== undefined) && (
                      <div className="small">
                        <div className="d-flex align-items-center">
                          <span className="text-muted">{formatQuantity(movement.previousStock)}</span>
                          <i className="bi bi-arrow-right mx-1 text-muted" />
                          <span className="fw-semibold">{formatQuantity(movement.newStock)}</span>
                        </div>
                        <div className={`small ${
                          movement.newStock > movement.previousStock ? 'text-success' : 'text-danger'
                        }`}>
                          {movement.newStock > movement.previousStock ? '+' : ''}
                          {formatQuantity(movement.newStock - movement.previousStock)}
                        </div>
                      </div>
                    )}
                  </td>
                  <td>
                    <span className={`badge bg-${getStatusBadge(movement.status)}`}>
                      {movement.status}
                    </span>
                  </td>
                  <td>
                    <div className="small">
                      <div className="fw-semibold">{formattedDate.date}</div>
                      <div className="text-muted">{formattedDate.time}</div>
                    </div>
                  </td>
                  <td>
                    <div className="btn-group btn-group-sm" role="group">
                      <button
                        type="button"
                        className="btn btn-outline-primary"
                        title="View"
                        onClick={() => onView(movement)}
                      >
                        <i className="bi bi-eye" />
                      </button>
                      <button
                        type="button"
                        className="btn btn-outline-secondary"
                        title="Edit"
                        onClick={() => onEdit(movement)}
                      >
                        <i className="bi bi-pencil" />
                      </button>
                      <button
                        type="button"
                        className="btn btn-outline-danger"
                        title="Delete"
                        onClick={() => onDelete(movement)}
                      >
                        <i className="bi bi-trash" />
                      </button>
                    </div>
                  </td>
                </tr>
              )
            })}
          </tbody>
        </table>
      </div>
    </div>
  )
})

InventoryMovementsTable.displayName = 'InventoryMovementsTable'