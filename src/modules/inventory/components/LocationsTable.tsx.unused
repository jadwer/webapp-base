/**
 * LOCATIONS TABLE
 * Tabla de warehouse locations con sorting, selecciÃ³n y acciones
 * PatrÃ³n basado en el Ã©xito del mÃ³dulo Products
 */

'use client'

import React, { memo } from 'react'
import type { WarehouseLocation, LocationSortOptions, WarehouseParsed } from '../types'

interface LocationsTableProps {
  locations: WarehouseLocation[]
  warehouses: WarehouseParsed[]
  isLoading: boolean
  selectedIds: string[]
  onSelectionChange: (ids: string[]) => void
  onEdit: (location: WarehouseLocation) => void
  onView: (location: WarehouseLocation) => void
  onDelete: (location: WarehouseLocation) => void
  sort: LocationSortOptions | null
  onSortChange: (sort: LocationSortOptions | null) => void
}

export const LocationsTable = memo<LocationsTableProps>(({
  locations,
  warehouses,
  isLoading,
  selectedIds,
  onSelectionChange,
  onEdit,
  onView,
  onDelete,
  sort,
  onSortChange
}) => {
  console.log('ðŸ”„ [LocationsTable] Rendering with', locations.length, 'locations')
  
  // Create warehouse lookup for performance
  const warehouseMap = React.useMemo(() => {
    return warehouses.reduce((acc, warehouse) => {
      acc[warehouse.id] = warehouse
      return acc
    }, {} as Record<string, WarehouseParsed>)
  }, [warehouses])
  
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      onSelectionChange(locations.map(l => l.id))
    } else {
      onSelectionChange([])
    }
  }
  
  const handleSelectOne = (id: string, checked: boolean) => {
    if (checked) {
      onSelectionChange([...selectedIds, id])
    } else {
      onSelectionChange(selectedIds.filter(selectedId => selectedId !== id))
    }
  }
  
  const handleSort = (field: keyof WarehouseLocation) => {
    if (sort?.field === field) {
      // Toggle direction
      const newDirection = sort.direction === 'asc' ? 'desc' : 'asc'
      onSortChange({ field, direction: newDirection })
    } else {
      // New field, start with asc
      onSortChange({ field, direction: 'asc' })
    }
  }
  
  const getSortIcon = (field: keyof WarehouseLocation) => {
    if (sort?.field !== field) {
      return <i className="bi bi-arrow-down-up text-muted" />
    }
    return sort.direction === 'asc' 
      ? <i className="bi bi-arrow-up text-primary" />
      : <i className="bi bi-arrow-down text-primary" />
  }
  
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }
  
  const getLocationTypeBadge = (type: string) => {
    const variants: Record<string, string> = {
      'rack': 'primary',
      'shelf': 'info',
      'floor': 'success',
      'bin': 'warning',
      'dock': 'dark'
    }
    return variants[type] || 'secondary'
  }
  
  const formatLocationCode = (location: WarehouseLocation) => {
    // Build hierarchical code: A-1-2-3 (Aisle-Rack-Shelf-Level)
    const parts = [
      location.aisle,
      location.rack,
      location.shelf,
      location.level
    ].filter(Boolean)
    
    return parts.length > 0 ? parts.join('-') : location.code
  }
  
  if (isLoading) {
    return (
      <div className="card">
        <div className="card-body text-center py-5">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <p className="mt-3 text-muted">Loading locations...</p>
        </div>
      </div>
    )
  }
  
  if (locations.length === 0) {
    return (
      <div className="card">
        <div className="card-body text-center py-5">
          <i className="bi bi-geo-alt display-1 text-muted" />
          <h5 className="mt-3">No locations found</h5>
          <p className="text-muted">Create your first warehouse location to get started</p>
        </div>
      </div>
    )
  }
  
  return (
    <div className="card">
      <div className="table-responsive">
        <table className="table table-hover mb-0">
          <thead className="table-light">
            <tr>
              <th style={{ width: '50px' }}>
                <input
                  type="checkbox"
                  className="form-check-input"
                  checked={selectedIds.length === locations.length && locations.length > 0}
                  onChange={(e) => handleSelectAll(e.target.checked)}
                />
              </th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('name')}
              >
                Name {getSortIcon('name')}
              </th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('code')}
              >
                Code {getSortIcon('code')}
              </th>
              <th>Warehouse</th>
              <th>Type</th>
              <th>Location</th>
              <th>Capacity</th>
              <th>Properties</th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('isActive')}
              >
                Status {getSortIcon('isActive')}
              </th>
              <th 
                className="cursor-pointer user-select-none"
                onClick={() => handleSort('createdAt')}
              >
                Created {getSortIcon('createdAt')}
              </th>
              <th style={{ width: '120px' }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {locations.map((location) => {
              const warehouse = warehouseMap[location.warehouseId]
              
              return (
                <tr key={location.id}>
                  <td>
                    <input
                      type="checkbox"
                      className="form-check-input"
                      checked={selectedIds.includes(location.id)}
                      onChange={(e) => handleSelectOne(location.id, e.target.checked)}
                    />
                  </td>
                  <td>
                    <div className="fw-semibold">{location.name}</div>
                    {location.description && (
                      <small className="text-muted">{location.description}</small>
                    )}
                  </td>
                  <td>
                    <code className="text-dark">{location.code}</code>
                    {formatLocationCode(location) !== location.code && (
                      <div className="small text-muted">
                        {formatLocationCode(location)}
                      </div>
                    )}
                  </td>
                  <td>
                    {warehouse && (
                      <div>
                        <div className="small fw-semibold">{warehouse.name}</div>
                        <div className="small text-muted">{warehouse.code}</div>
                      </div>
                    )}
                  </td>
                  <td>
                    <span className={`badge bg-${getLocationTypeBadge(location.locationType)}`}>
                      {location.locationType}
                    </span>
                  </td>
                  <td>
                    <div className="small">
                      {location.aisle && <div><strong>Aisle:</strong> {location.aisle}</div>}
                      {location.rack && <div><strong>Rack:</strong> {location.rack}</div>}
                      {location.shelf && <div><strong>Shelf:</strong> {location.shelf}</div>}
                      {location.level && <div><strong>Level:</strong> {location.level}</div>}
                      {location.position && <div><strong>Pos:</strong> {location.position}</div>}
                    </div>
                  </td>
                  <td>
                    <div className="small">
                      {location.maxWeight && (
                        <div><strong>Weight:</strong> {location.maxWeight} kg</div>
                      )}
                      {location.maxVolume && (
                        <div><strong>Volume:</strong> {location.maxVolume} mÂ³</div>
                      )}
                      {location.dimensions && (
                        <div className="text-muted">{location.dimensions}</div>
                      )}
                    </div>
                  </td>
                  <td>
                    <div className="d-flex flex-wrap gap-1">
                      <span className={`badge bg-${location.isActive ? 'success' : 'secondary'} badge-sm`}>
                        {location.isActive ? 'Active' : 'Inactive'}
                      </span>
                      {location.isPickable && (
                        <span className="badge bg-primary badge-sm">Pickable</span>
                      )}
                      {location.isReceivable && (
                        <span className="badge bg-info badge-sm">Receivable</span>
                      )}
                    </div>
                  </td>
                  <td>
                    <small className="text-muted">
                      {formatDate(location.createdAt)}
                    </small>
                  </td>
                  <td>
                    <div className="btn-group btn-group-sm" role="group">
                      <button
                        type="button"
                        className="btn btn-outline-primary"
                        title="View"
                        onClick={() => onView(location)}
                      >
                        <i className="bi bi-eye" />
                      </button>
                      <button
                        type="button"
                        className="btn btn-outline-secondary"
                        title="Edit"
                        onClick={() => onEdit(location)}
                      >
                        <i className="bi bi-pencil" />
                      </button>
                      <button
                        type="button"
                        className="btn btn-outline-danger"
                        title="Delete"
                        onClick={() => onDelete(location)}
                      >
                        <i className="bi bi-trash" />
                      </button>
                    </div>
                  </td>
                </tr>
              )
            })}
          </tbody>
        </table>
      </div>
    </div>
  )
})

LocationsTable.displayName = 'LocationsTable'